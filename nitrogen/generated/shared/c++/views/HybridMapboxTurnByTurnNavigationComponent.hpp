///
/// HybridMapboxTurnByTurnNavigationComponent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <optional>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/NitroHash.hpp>
#include <NitroModules/CachedProp.hpp>
#include <react/renderer/core/ConcreteComponentDescriptor.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/components/view/ConcreteViewShadowNode.h>
#include <react/renderer/components/view/ViewProps.h>

#include <optional>
#include <optional>
#include "DistanceUnitEnum.hpp"
#include "Coordinate.hpp"
#include <optional>
#include <string>
#include "Coordinate.hpp"
#include <optional>
#include <string>
#include <optional>
#include "TravelModeEnum.hpp"
#include <optional>
#include <optional>
#include <vector>
#include "Waypoint.hpp"
#include <optional>
#include <optional>
#include <optional>
#include <optional>
#include <functional>
#include <memory>
#include "HybridMapboxTurnByTurnNavigationSpec.hpp"

namespace margelo::nitro::mapboxturnbyturnnavigation::views {

  using namespace facebook;

  /**
   * The name of the actual native View.
   */
  extern const char HybridMapboxTurnByTurnNavigationComponentName[];

  /**
   * Props for the "MapboxTurnByTurnNavigation" View.
   */
  class HybridMapboxTurnByTurnNavigationProps final: public react::ViewProps {
  public:
    HybridMapboxTurnByTurnNavigationProps() = default;
    HybridMapboxTurnByTurnNavigationProps(const HybridMapboxTurnByTurnNavigationProps&);
    HybridMapboxTurnByTurnNavigationProps(const react::PropsParserContext& context,
                                          const HybridMapboxTurnByTurnNavigationProps& sourceProps,
                                          const react::RawProps& rawProps);

  public:
    CachedProp<std::optional<bool>> mute;
    CachedProp<std::optional<DistanceUnitEnum>> distanceUnit;
    CachedProp<Coordinate> origin;
    CachedProp<std::optional<std::string>> destinationTitle;
    CachedProp<Coordinate> destination;
    CachedProp<std::optional<std::string>> language;
    CachedProp<std::optional<TravelModeEnum>> travelMode;
    CachedProp<std::optional<bool>> shouldSimulateRoute;
    CachedProp<std::optional<std::vector<Waypoint>>> waypoints;
    CachedProp<std::optional<bool>> showsEndOfRouteFeedback;
    CachedProp<std::optional<bool>> showCancelButton;
    CachedProp<std::optional<bool>> hideStatusView;
    CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::mapboxturnbyturnnavigation::HybridMapboxTurnByTurnNavigationSpec>& /* ref */)>>> hybridRef;

  private:
    static bool filterObjectKeys(const std::string& propName);
  };

  /**
   * State for the "MapboxTurnByTurnNavigation" View.
   */
  class HybridMapboxTurnByTurnNavigationState final {
  public:
    HybridMapboxTurnByTurnNavigationState() = default;

  public:
    void setProps(const HybridMapboxTurnByTurnNavigationProps& props) { _props.emplace(props); }
    const std::optional<HybridMapboxTurnByTurnNavigationProps>& getProps() const { return _props; }

  public:
#ifdef ANDROID
  HybridMapboxTurnByTurnNavigationState(const HybridMapboxTurnByTurnNavigationState& /* previousState */, folly::dynamic /* data */) {}
  folly::dynamic getDynamic() const {
    throw std::runtime_error("HybridMapboxTurnByTurnNavigationState does not support folly!");
  }
  react::MapBuffer getMapBuffer() const {
    throw std::runtime_error("HybridMapboxTurnByTurnNavigationState does not support MapBuffer!");
  };
#endif

  private:
    std::optional<HybridMapboxTurnByTurnNavigationProps> _props;
  };

  /**
   * The Shadow Node for the "MapboxTurnByTurnNavigation" View.
   */
  using HybridMapboxTurnByTurnNavigationShadowNode = react::ConcreteViewShadowNode<HybridMapboxTurnByTurnNavigationComponentName /* "HybridMapboxTurnByTurnNavigation" */,
                                                                                   HybridMapboxTurnByTurnNavigationProps /* custom props */,
                                                                                   react::ViewEventEmitter /* default */,
                                                                                   HybridMapboxTurnByTurnNavigationState /* custom state */>;

  /**
   * The Component Descriptor for the "MapboxTurnByTurnNavigation" View.
   */
  class HybridMapboxTurnByTurnNavigationComponentDescriptor final: public react::ConcreteComponentDescriptor<HybridMapboxTurnByTurnNavigationShadowNode> {
  public:
    HybridMapboxTurnByTurnNavigationComponentDescriptor(const react::ComponentDescriptorParameters& parameters);

  public:
    /**
     * A faster path for cloning props - reuses the caching logic from `HybridMapboxTurnByTurnNavigationProps`.
     */
    react::Props::Shared cloneProps(const react::PropsParserContext& context,
                                    const react::Props::Shared& props,
                                    react::RawProps rawProps) const override;
#ifdef ANDROID
    void adopt(react::ShadowNode& shadowNode) const override;
#endif
  };

  /* The actual view for "MapboxTurnByTurnNavigation" needs to be implemented in platform-specific code. */

} // namespace margelo::nitro::mapboxturnbyturnnavigation::views
