///
/// HybridMapboxTurnByTurnNavigationComponent.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridMapboxTurnByTurnNavigationComponent.hpp"

#include <string>
#include <exception>
#include <utility>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/JSIConverter.hpp>
#include <react/renderer/core/RawValue.h>
#include <react/renderer/core/ShadowNode.h>
#include <react/renderer/core/ComponentDescriptor.h>
#include <react/renderer/components/view/ViewProps.h>

namespace margelo::nitro::mapboxturnbyturnnavigation::views {

  extern const char HybridMapboxTurnByTurnNavigationComponentName[] = "MapboxTurnByTurnNavigation";

  HybridMapboxTurnByTurnNavigationProps::HybridMapboxTurnByTurnNavigationProps(const react::PropsParserContext& context,
                                                                               const HybridMapboxTurnByTurnNavigationProps& sourceProps,
                                                                               const react::RawProps& rawProps):
    react::ViewProps(context, sourceProps, rawProps, filterObjectKeys),
    mute([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("mute", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.mute;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.mute);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.mute: ") + exc.what());
      }
    }()),
    distanceUnit([&]() -> CachedProp<std::optional<DistanceUnitEnum>> {
      try {
        const react::RawValue* rawValue = rawProps.at("distanceUnit", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.distanceUnit;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<DistanceUnitEnum>>::fromRawValue(*runtime, value, sourceProps.distanceUnit);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.distanceUnit: ") + exc.what());
      }
    }()),
    origin([&]() -> CachedProp<Coordinate> {
      try {
        const react::RawValue* rawValue = rawProps.at("origin", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.origin;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<Coordinate>::fromRawValue(*runtime, value, sourceProps.origin);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.origin: ") + exc.what());
      }
    }()),
    destinationTitle([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("destinationTitle", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.destinationTitle;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.destinationTitle);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.destinationTitle: ") + exc.what());
      }
    }()),
    destination([&]() -> CachedProp<Coordinate> {
      try {
        const react::RawValue* rawValue = rawProps.at("destination", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.destination;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<Coordinate>::fromRawValue(*runtime, value, sourceProps.destination);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.destination: ") + exc.what());
      }
    }()),
    language([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("language", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.language;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.language);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.language: ") + exc.what());
      }
    }()),
    travelMode([&]() -> CachedProp<std::optional<TravelModeEnum>> {
      try {
        const react::RawValue* rawValue = rawProps.at("travelMode", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.travelMode;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<TravelModeEnum>>::fromRawValue(*runtime, value, sourceProps.travelMode);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.travelMode: ") + exc.what());
      }
    }()),
    shouldSimulateRoute([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("shouldSimulateRoute", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.shouldSimulateRoute;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.shouldSimulateRoute);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.shouldSimulateRoute: ") + exc.what());
      }
    }()),
    waypoints([&]() -> CachedProp<std::optional<std::vector<Waypoint>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("waypoints", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.waypoints;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::vector<Waypoint>>>::fromRawValue(*runtime, value, sourceProps.waypoints);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.waypoints: ") + exc.what());
      }
    }()),
    showsEndOfRouteFeedback([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("showsEndOfRouteFeedback", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.showsEndOfRouteFeedback;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.showsEndOfRouteFeedback);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.showsEndOfRouteFeedback: ") + exc.what());
      }
    }()),
    showCancelButton([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("showCancelButton", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.showCancelButton;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.showCancelButton);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.showCancelButton: ") + exc.what());
      }
    }()),
    hideStatusView([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("hideStatusView", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.hideStatusView;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.hideStatusView);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.hideStatusView: ") + exc.what());
      }
    }()),
    hybridRef([&]() -> CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::mapboxturnbyturnnavigation::HybridMapboxTurnByTurnNavigationSpec>& /* ref */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("hybridRef", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.hybridRef;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::mapboxturnbyturnnavigation::HybridMapboxTurnByTurnNavigationSpec>& /* ref */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.hybridRef);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("MapboxTurnByTurnNavigation.hybridRef: ") + exc.what());
      }
    }()) { }

  HybridMapboxTurnByTurnNavigationProps::HybridMapboxTurnByTurnNavigationProps(const HybridMapboxTurnByTurnNavigationProps& other):
    react::ViewProps(),
    mute(other.mute),
    distanceUnit(other.distanceUnit),
    origin(other.origin),
    destinationTitle(other.destinationTitle),
    destination(other.destination),
    language(other.language),
    travelMode(other.travelMode),
    shouldSimulateRoute(other.shouldSimulateRoute),
    waypoints(other.waypoints),
    showsEndOfRouteFeedback(other.showsEndOfRouteFeedback),
    showCancelButton(other.showCancelButton),
    hideStatusView(other.hideStatusView),
    hybridRef(other.hybridRef) { }

  bool HybridMapboxTurnByTurnNavigationProps::filterObjectKeys(const std::string& propName) {
    switch (hashString(propName)) {
      case hashString("mute"): return true;
      case hashString("distanceUnit"): return true;
      case hashString("origin"): return true;
      case hashString("destinationTitle"): return true;
      case hashString("destination"): return true;
      case hashString("language"): return true;
      case hashString("travelMode"): return true;
      case hashString("shouldSimulateRoute"): return true;
      case hashString("waypoints"): return true;
      case hashString("showsEndOfRouteFeedback"): return true;
      case hashString("showCancelButton"): return true;
      case hashString("hideStatusView"): return true;
      case hashString("hybridRef"): return true;
      default: return false;
    }
  }

  HybridMapboxTurnByTurnNavigationComponentDescriptor::HybridMapboxTurnByTurnNavigationComponentDescriptor(const react::ComponentDescriptorParameters& parameters)
    : ConcreteComponentDescriptor(parameters,
                                  react::RawPropsParser(/* enableJsiParser */ true)) {}

  react::Props::Shared HybridMapboxTurnByTurnNavigationComponentDescriptor::cloneProps(const react::PropsParserContext& context,
                                                                                       const react::Props::Shared& props,
                                                                                       react::RawProps rawProps) const {
    // 1. Prepare raw props parser
    rawProps.parse(rawPropsParser_);
    // 2. Copy props with Nitro's cached copy constructor
    return HybridMapboxTurnByTurnNavigationShadowNode::Props(context, /* & */ rawProps, props);
  }

#ifdef ANDROID
  void HybridMapboxTurnByTurnNavigationComponentDescriptor::adopt(react::ShadowNode& shadowNode) const {
    // This is called immediately after `ShadowNode` is created, cloned or in progress.
    // On Android, we need to wrap props in our state, which gets routed through Java and later unwrapped in JNI/C++.
    auto& concreteShadowNode = dynamic_cast<HybridMapboxTurnByTurnNavigationShadowNode&>(shadowNode);
    const HybridMapboxTurnByTurnNavigationProps& props = concreteShadowNode.getConcreteProps();
    HybridMapboxTurnByTurnNavigationState state;
    state.setProps(props);
    concreteShadowNode.setStateData(std::move(state));
  }
#endif

} // namespace margelo::nitro::mapboxturnbyturnnavigation::views
