///
/// HybridMapboxTurnByTurnNavigationSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridMapboxTurnByTurnNavigationSpec.hpp"

namespace margelo::nitro::mapboxturnbyturnnavigation {

  void HybridMapboxTurnByTurnNavigationSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter("mute", &HybridMapboxTurnByTurnNavigationSpec::getMute);
      prototype.registerHybridSetter("mute", &HybridMapboxTurnByTurnNavigationSpec::setMute);
      prototype.registerHybridGetter("distanceUnit", &HybridMapboxTurnByTurnNavigationSpec::getDistanceUnit);
      prototype.registerHybridSetter("distanceUnit", &HybridMapboxTurnByTurnNavigationSpec::setDistanceUnit);
      prototype.registerHybridGetter("origin", &HybridMapboxTurnByTurnNavigationSpec::getOrigin);
      prototype.registerHybridSetter("origin", &HybridMapboxTurnByTurnNavigationSpec::setOrigin);
      prototype.registerHybridGetter("destinationTitle", &HybridMapboxTurnByTurnNavigationSpec::getDestinationTitle);
      prototype.registerHybridSetter("destinationTitle", &HybridMapboxTurnByTurnNavigationSpec::setDestinationTitle);
      prototype.registerHybridGetter("destination", &HybridMapboxTurnByTurnNavigationSpec::getDestination);
      prototype.registerHybridSetter("destination", &HybridMapboxTurnByTurnNavigationSpec::setDestination);
      prototype.registerHybridGetter("language", &HybridMapboxTurnByTurnNavigationSpec::getLanguage);
      prototype.registerHybridSetter("language", &HybridMapboxTurnByTurnNavigationSpec::setLanguage);
      prototype.registerHybridGetter("travelMode", &HybridMapboxTurnByTurnNavigationSpec::getTravelMode);
      prototype.registerHybridSetter("travelMode", &HybridMapboxTurnByTurnNavigationSpec::setTravelMode);
      prototype.registerHybridGetter("shouldSimulateRoute", &HybridMapboxTurnByTurnNavigationSpec::getShouldSimulateRoute);
      prototype.registerHybridSetter("shouldSimulateRoute", &HybridMapboxTurnByTurnNavigationSpec::setShouldSimulateRoute);
      prototype.registerHybridGetter("waypoints", &HybridMapboxTurnByTurnNavigationSpec::getWaypoints);
      prototype.registerHybridSetter("waypoints", &HybridMapboxTurnByTurnNavigationSpec::setWaypoints);
      prototype.registerHybridGetter("showsEndOfRouteFeedback", &HybridMapboxTurnByTurnNavigationSpec::getShowsEndOfRouteFeedback);
      prototype.registerHybridSetter("showsEndOfRouteFeedback", &HybridMapboxTurnByTurnNavigationSpec::setShowsEndOfRouteFeedback);
      prototype.registerHybridGetter("showCancelButton", &HybridMapboxTurnByTurnNavigationSpec::getShowCancelButton);
      prototype.registerHybridSetter("showCancelButton", &HybridMapboxTurnByTurnNavigationSpec::setShowCancelButton);
      prototype.registerHybridGetter("hideStatusView", &HybridMapboxTurnByTurnNavigationSpec::getHideStatusView);
      prototype.registerHybridSetter("hideStatusView", &HybridMapboxTurnByTurnNavigationSpec::setHideStatusView);
      prototype.registerHybridMethod("addOnWaypointArrivalListener", &HybridMapboxTurnByTurnNavigationSpec::addOnWaypointArrivalListener);
      prototype.registerHybridMethod("addOnArrivalListener", &HybridMapboxTurnByTurnNavigationSpec::addOnArrivalListener);
      prototype.registerHybridMethod("addOnLocationChangeListener", &HybridMapboxTurnByTurnNavigationSpec::addOnLocationChangeListener);
      prototype.registerHybridMethod("addOnRouteProgressChangeListener", &HybridMapboxTurnByTurnNavigationSpec::addOnRouteProgressChangeListener);
      prototype.registerHybridMethod("addOnCancelListener", &HybridMapboxTurnByTurnNavigationSpec::addOnCancelListener);
      prototype.registerHybridMethod("addOnErrorListener", &HybridMapboxTurnByTurnNavigationSpec::addOnErrorListener);
    });
  }

} // namespace margelo::nitro::mapboxturnbyturnnavigation
