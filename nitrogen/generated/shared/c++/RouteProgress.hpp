///
/// RouteProgress.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif





namespace margelo::nitro::mapboxturnbyturnnavigation {

  /**
   * A struct which can be represented as a JavaScript object (RouteProgress).
   */
  struct RouteProgress {
  public:
    double distanceTraveled     SWIFT_PRIVATE;
    double durationRemaining     SWIFT_PRIVATE;
    double fractionTraveled     SWIFT_PRIVATE;
    double distanceRemaining     SWIFT_PRIVATE;

  public:
    RouteProgress() = default;
    explicit RouteProgress(double distanceTraveled, double durationRemaining, double fractionTraveled, double distanceRemaining): distanceTraveled(distanceTraveled), durationRemaining(durationRemaining), fractionTraveled(fractionTraveled), distanceRemaining(distanceRemaining) {}
  };

} // namespace margelo::nitro::mapboxturnbyturnnavigation

namespace margelo::nitro {

  using namespace margelo::nitro::mapboxturnbyturnnavigation;

  // C++ RouteProgress <> JS RouteProgress (object)
  template <>
  struct JSIConverter<RouteProgress> final {
    static inline RouteProgress fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return RouteProgress(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "distanceTraveled")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "durationRemaining")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "fractionTraveled")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "distanceRemaining"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const RouteProgress& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "distanceTraveled", JSIConverter<double>::toJSI(runtime, arg.distanceTraveled));
      obj.setProperty(runtime, "durationRemaining", JSIConverter<double>::toJSI(runtime, arg.durationRemaining));
      obj.setProperty(runtime, "fractionTraveled", JSIConverter<double>::toJSI(runtime, arg.fractionTraveled));
      obj.setProperty(runtime, "distanceRemaining", JSIConverter<double>::toJSI(runtime, arg.distanceRemaining));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "distanceTraveled"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "durationRemaining"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "fractionTraveled"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "distanceRemaining"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
