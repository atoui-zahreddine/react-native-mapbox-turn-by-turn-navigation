///
/// HybridMapboxTurnByTurnNavigationSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridMapboxTurnByTurnNavigationSpec``
public protocol HybridMapboxTurnByTurnNavigationSpec_protocol: HybridObject, HybridView {
  // Properties
  var mute: Bool? { get set }
  var distanceUnit: DistanceUnitEnum? { get set }
  var origin: Coordinate { get set }
  var destinationTitle: String? { get set }
  var destination: Coordinate { get set }
  var language: String? { get set }
  var travelMode: TravelModeEnum? { get set }
  var shouldSimulateRoute: Bool? { get set }
  var waypoints: [Waypoint]? { get set }
  var showsEndOfRouteFeedback: Bool? { get set }
  var showCancelButton: Bool? { get set }
  var hideStatusView: Bool? { get set }

  // Methods
  func addOnWaypointArrivalListener(listener: @escaping (_ event: WaypointEvent) -> Void) throws -> () -> Void
  func addOnArrivalListener(listener: @escaping (_ event: Coordinate) -> Void) throws -> () -> Void
  func addOnLocationChangeListener(listener: @escaping (_ event: LocationData) -> Void) throws -> () -> Void
  func addOnRouteProgressChangeListener(listener: @escaping (_ event: RouteProgress) -> Void) throws -> () -> Void
  func addOnCancelListener(listener: @escaping () -> Void) throws -> () -> Void
  func addOnErrorListener(listener: @escaping (_ error: Message) -> Void) throws -> () -> Void
}

/// See ``HybridMapboxTurnByTurnNavigationSpec``
public class HybridMapboxTurnByTurnNavigationSpec_base {
  private weak var cxxWrapper: HybridMapboxTurnByTurnNavigationSpec_cxx? = nil
  public func getCxxWrapper() -> HybridMapboxTurnByTurnNavigationSpec_cxx {
  #if DEBUG
    guard self is HybridMapboxTurnByTurnNavigationSpec else {
      fatalError("`self` is not a `HybridMapboxTurnByTurnNavigationSpec`! Did you accidentally inherit from `HybridMapboxTurnByTurnNavigationSpec_base` instead of `HybridMapboxTurnByTurnNavigationSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridMapboxTurnByTurnNavigationSpec_cxx(self as! HybridMapboxTurnByTurnNavigationSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the MapboxTurnByTurnNavigation HybridObject.
 * Implement this protocol to create Swift-based instances of MapboxTurnByTurnNavigation.
 * ```swift
 * class HybridMapboxTurnByTurnNavigation : HybridMapboxTurnByTurnNavigationSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridMapboxTurnByTurnNavigationSpec = HybridMapboxTurnByTurnNavigationSpec_protocol & HybridMapboxTurnByTurnNavigationSpec_base
