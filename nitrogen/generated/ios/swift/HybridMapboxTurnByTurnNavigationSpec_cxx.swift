///
/// HybridMapboxTurnByTurnNavigationSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridMapboxTurnByTurnNavigationSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class HybridMapboxTurnByTurnNavigationSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::mapboxturnbyturnnavigation::bridge::swift`)
   * from `MapboxTurnByTurnNavigation-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.mapboxturnbyturnnavigation.bridge.swift

  /**
   * Holds an instance of the `HybridMapboxTurnByTurnNavigationSpec` Swift protocol.
   */
  private var __implementation: any HybridMapboxTurnByTurnNavigationSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_margelo__nitro__mapboxturnbyturnnavigation__HybridMapboxTurnByTurnNavigationSpec_

  /**
   * Create a new `HybridMapboxTurnByTurnNavigationSpec_cxx` that wraps the given `HybridMapboxTurnByTurnNavigationSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridMapboxTurnByTurnNavigationSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridMapboxTurnByTurnNavigationSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridMapboxTurnByTurnNavigationSpec() -> any HybridMapboxTurnByTurnNavigationSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridMapboxTurnByTurnNavigationSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridMapboxTurnByTurnNavigationSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridMapboxTurnByTurnNavigationSpec_cxx {
    return Unmanaged<HybridMapboxTurnByTurnNavigationSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<margelo::nitro::mapboxturnbyturnnavigation::HybridMapboxTurnByTurnNavigationSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_margelo__nitro__mapboxturnbyturnnavigation__HybridMapboxTurnByTurnNavigationSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_margelo__nitro__mapboxturnbyturnnavigation__HybridMapboxTurnByTurnNavigationSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_margelo__nitro__mapboxturnbyturnnavigation__HybridMapboxTurnByTurnNavigationSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  // Properties
  public final var mute: bridge.std__optional_bool_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = self.__implementation.mute {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.mute = newValue.value
    }
  }
  
  public final var distanceUnit: bridge.std__optional_DistanceUnitEnum_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_DistanceUnitEnum_ in
        if let __unwrappedValue = self.__implementation.distanceUnit {
          return bridge.create_std__optional_DistanceUnitEnum_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.distanceUnit = newValue.value
    }
  }
  
  public final var origin: Coordinate {
    @inline(__always)
    get {
      return self.__implementation.origin
    }
    @inline(__always)
    set {
      self.__implementation.origin = newValue
    }
  }
  
  public final var destinationTitle: bridge.std__optional_std__string_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = self.__implementation.destinationTitle {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.destinationTitle = { () -> String? in
        if let __unwrapped = newValue.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var destination: Coordinate {
    @inline(__always)
    get {
      return self.__implementation.destination
    }
    @inline(__always)
    set {
      self.__implementation.destination = newValue
    }
  }
  
  public final var language: bridge.std__optional_std__string_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = self.__implementation.language {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.language = { () -> String? in
        if let __unwrapped = newValue.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var travelMode: bridge.std__optional_TravelModeEnum_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_TravelModeEnum_ in
        if let __unwrappedValue = self.__implementation.travelMode {
          return bridge.create_std__optional_TravelModeEnum_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.travelMode = newValue.value
    }
  }
  
  public final var shouldSimulateRoute: bridge.std__optional_bool_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = self.__implementation.shouldSimulateRoute {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.shouldSimulateRoute = newValue.value
    }
  }
  
  public final var waypoints: bridge.std__optional_std__vector_Waypoint__ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__vector_Waypoint__ in
        if let __unwrappedValue = self.__implementation.waypoints {
          return bridge.create_std__optional_std__vector_Waypoint__({ () -> bridge.std__vector_Waypoint_ in
            var __vector = bridge.create_std__vector_Waypoint_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(__item)
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.waypoints = { () -> [Waypoint]? in
        if let __unwrapped = newValue.value {
          return __unwrapped.map({ __item in __item })
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var showsEndOfRouteFeedback: bridge.std__optional_bool_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = self.__implementation.showsEndOfRouteFeedback {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.showsEndOfRouteFeedback = newValue.value
    }
  }
  
  public final var showCancelButton: bridge.std__optional_bool_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = self.__implementation.showCancelButton {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.showCancelButton = newValue.value
    }
  }
  
  public final var hideStatusView: bridge.std__optional_bool_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = self.__implementation.hideStatusView {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.hideStatusView = newValue.value
    }
  }

  // Methods
  @inline(__always)
  public final func addOnWaypointArrivalListener(listener: bridge.Func_void_WaypointEvent) -> bridge.Result_std__function_void____ {
    do {
      let __result = try self.__implementation.addOnWaypointArrivalListener(listener: { () -> (WaypointEvent) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_WaypointEvent(listener)
        return { (__event: WaypointEvent) -> Void in
          __wrappedFunction.call(__event)
        }
      }())
      let __resultCpp = { () -> bridge.Func_void in
        let __closureWrapper = Func_void(__result)
        return bridge.create_Func_void(__closureWrapper.toUnsafe())
      }()
      return bridge.create_Result_std__function_void____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__function_void____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func addOnArrivalListener(listener: bridge.Func_void_Coordinate) -> bridge.Result_std__function_void____ {
    do {
      let __result = try self.__implementation.addOnArrivalListener(listener: { () -> (Coordinate) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_Coordinate(listener)
        return { (__event: Coordinate) -> Void in
          __wrappedFunction.call(__event)
        }
      }())
      let __resultCpp = { () -> bridge.Func_void in
        let __closureWrapper = Func_void(__result)
        return bridge.create_Func_void(__closureWrapper.toUnsafe())
      }()
      return bridge.create_Result_std__function_void____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__function_void____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func addOnLocationChangeListener(listener: bridge.Func_void_LocationData) -> bridge.Result_std__function_void____ {
    do {
      let __result = try self.__implementation.addOnLocationChangeListener(listener: { () -> (LocationData) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_LocationData(listener)
        return { (__event: LocationData) -> Void in
          __wrappedFunction.call(__event)
        }
      }())
      let __resultCpp = { () -> bridge.Func_void in
        let __closureWrapper = Func_void(__result)
        return bridge.create_Func_void(__closureWrapper.toUnsafe())
      }()
      return bridge.create_Result_std__function_void____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__function_void____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func addOnRouteProgressChangeListener(listener: bridge.Func_void_RouteProgress) -> bridge.Result_std__function_void____ {
    do {
      let __result = try self.__implementation.addOnRouteProgressChangeListener(listener: { () -> (RouteProgress) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_RouteProgress(listener)
        return { (__event: RouteProgress) -> Void in
          __wrappedFunction.call(__event)
        }
      }())
      let __resultCpp = { () -> bridge.Func_void in
        let __closureWrapper = Func_void(__result)
        return bridge.create_Func_void(__closureWrapper.toUnsafe())
      }()
      return bridge.create_Result_std__function_void____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__function_void____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func addOnCancelListener(listener: bridge.Func_void) -> bridge.Result_std__function_void____ {
    do {
      let __result = try self.__implementation.addOnCancelListener(listener: { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(listener)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }())
      let __resultCpp = { () -> bridge.Func_void in
        let __closureWrapper = Func_void(__result)
        return bridge.create_Func_void(__closureWrapper.toUnsafe())
      }()
      return bridge.create_Result_std__function_void____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__function_void____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func addOnErrorListener(listener: bridge.Func_void_Message) -> bridge.Result_std__function_void____ {
    do {
      let __result = try self.__implementation.addOnErrorListener(listener: { () -> (Message) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_Message(listener)
        return { (__error: Message) -> Void in
          __wrappedFunction.call(__error)
        }
      }())
      let __resultCpp = { () -> bridge.Func_void in
        let __closureWrapper = Func_void(__result)
        return bridge.create_Func_void(__closureWrapper.toUnsafe())
      }()
      return bridge.create_Result_std__function_void____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__function_void____(__exceptionPtr)
    }
  }
  
  public final func getView() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(__implementation.view).toOpaque()
  }
  
  public final func beforeUpdate() {
    __implementation.beforeUpdate()
  }
  
  public final func afterUpdate() {
    __implementation.afterUpdate()
  }
}
