///
/// MapboxTurnByTurnNavigation-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `Coordinate` to properly resolve imports.
namespace margelo::nitro::mapboxturnbyturnnavigation { struct Coordinate; }
// Forward declaration of `DistanceUnitEnum` to properly resolve imports.
namespace margelo::nitro::mapboxturnbyturnnavigation { enum class DistanceUnitEnum; }
// Forward declaration of `HybridMapboxTurnByTurnNavigationSpec` to properly resolve imports.
namespace margelo::nitro::mapboxturnbyturnnavigation { class HybridMapboxTurnByTurnNavigationSpec; }
// Forward declaration of `LocationData` to properly resolve imports.
namespace margelo::nitro::mapboxturnbyturnnavigation { struct LocationData; }
// Forward declaration of `Message` to properly resolve imports.
namespace margelo::nitro::mapboxturnbyturnnavigation { struct Message; }
// Forward declaration of `RouteProgress` to properly resolve imports.
namespace margelo::nitro::mapboxturnbyturnnavigation { struct RouteProgress; }
// Forward declaration of `TravelModeEnum` to properly resolve imports.
namespace margelo::nitro::mapboxturnbyturnnavigation { enum class TravelModeEnum; }
// Forward declaration of `WaypointEvent` to properly resolve imports.
namespace margelo::nitro::mapboxturnbyturnnavigation { struct WaypointEvent; }
// Forward declaration of `Waypoint` to properly resolve imports.
namespace margelo::nitro::mapboxturnbyturnnavigation { struct Waypoint; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridMapboxTurnByTurnNavigationSpec_cxx` to properly resolve imports.
namespace MapboxTurnByTurnNavigation { class HybridMapboxTurnByTurnNavigationSpec_cxx; }

// Include C++ defined types
#include "Coordinate.hpp"
#include "DistanceUnitEnum.hpp"
#include "HybridMapboxTurnByTurnNavigationSpec.hpp"
#include "LocationData.hpp"
#include "Message.hpp"
#include "RouteProgress.hpp"
#include "TravelModeEnum.hpp"
#include "Waypoint.hpp"
#include "WaypointEvent.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::mapboxturnbyturnnavigation::bridge::swift {

  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) {
    return std::optional<bool>(value);
  }
  
  // pragma MARK: std::optional<DistanceUnitEnum>
  /**
   * Specialized version of `std::optional<DistanceUnitEnum>`.
   */
  using std__optional_DistanceUnitEnum_ = std::optional<DistanceUnitEnum>;
  inline std::optional<DistanceUnitEnum> create_std__optional_DistanceUnitEnum_(const DistanceUnitEnum& value) {
    return std::optional<DistanceUnitEnum>(value);
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::optional<TravelModeEnum>
  /**
   * Specialized version of `std::optional<TravelModeEnum>`.
   */
  using std__optional_TravelModeEnum_ = std::optional<TravelModeEnum>;
  inline std::optional<TravelModeEnum> create_std__optional_TravelModeEnum_(const TravelModeEnum& value) {
    return std::optional<TravelModeEnum>(value);
  }
  
  // pragma MARK: std::vector<Waypoint>
  /**
   * Specialized version of `std::vector<Waypoint>`.
   */
  using std__vector_Waypoint_ = std::vector<Waypoint>;
  inline std::vector<Waypoint> create_std__vector_Waypoint_(size_t size) {
    std::vector<Waypoint> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::optional<std::vector<Waypoint>>
  /**
   * Specialized version of `std::optional<std::vector<Waypoint>>`.
   */
  using std__optional_std__vector_Waypoint__ = std::optional<std::vector<Waypoint>>;
  inline std::optional<std::vector<Waypoint>> create_std__optional_std__vector_Waypoint__(const std::vector<Waypoint>& value) {
    return std::optional<std::vector<Waypoint>>(value);
  }
  
  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_unique<std::function<void()>>(std::move(func))) {}
    inline void call() const {
      _function->operator()();
    }
  private:
    std::unique_ptr<std::function<void()>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper);
  inline Func_void_Wrapper wrap_Func_void(Func_void value) {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) {
    return std::optional<double>(value);
  }
  
  // pragma MARK: std::function<void(const WaypointEvent& /* event */)>
  /**
   * Specialized version of `std::function<void(const WaypointEvent&)>`.
   */
  using Func_void_WaypointEvent = std::function<void(const WaypointEvent& /* event */)>;
  /**
   * Wrapper class for a `std::function<void(const WaypointEvent& / * event * /)>`, this can be used from Swift.
   */
  class Func_void_WaypointEvent_Wrapper final {
  public:
    explicit Func_void_WaypointEvent_Wrapper(std::function<void(const WaypointEvent& /* event */)>&& func): _function(std::make_unique<std::function<void(const WaypointEvent& /* event */)>>(std::move(func))) {}
    inline void call(WaypointEvent event) const {
      _function->operator()(event);
    }
  private:
    std::unique_ptr<std::function<void(const WaypointEvent& /* event */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_WaypointEvent create_Func_void_WaypointEvent(void* _Nonnull swiftClosureWrapper);
  inline Func_void_WaypointEvent_Wrapper wrap_Func_void_WaypointEvent(Func_void_WaypointEvent value) {
    return Func_void_WaypointEvent_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const Coordinate& /* event */)>
  /**
   * Specialized version of `std::function<void(const Coordinate&)>`.
   */
  using Func_void_Coordinate = std::function<void(const Coordinate& /* event */)>;
  /**
   * Wrapper class for a `std::function<void(const Coordinate& / * event * /)>`, this can be used from Swift.
   */
  class Func_void_Coordinate_Wrapper final {
  public:
    explicit Func_void_Coordinate_Wrapper(std::function<void(const Coordinate& /* event */)>&& func): _function(std::make_unique<std::function<void(const Coordinate& /* event */)>>(std::move(func))) {}
    inline void call(Coordinate event) const {
      _function->operator()(event);
    }
  private:
    std::unique_ptr<std::function<void(const Coordinate& /* event */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_Coordinate create_Func_void_Coordinate(void* _Nonnull swiftClosureWrapper);
  inline Func_void_Coordinate_Wrapper wrap_Func_void_Coordinate(Func_void_Coordinate value) {
    return Func_void_Coordinate_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const LocationData& /* event */)>
  /**
   * Specialized version of `std::function<void(const LocationData&)>`.
   */
  using Func_void_LocationData = std::function<void(const LocationData& /* event */)>;
  /**
   * Wrapper class for a `std::function<void(const LocationData& / * event * /)>`, this can be used from Swift.
   */
  class Func_void_LocationData_Wrapper final {
  public:
    explicit Func_void_LocationData_Wrapper(std::function<void(const LocationData& /* event */)>&& func): _function(std::make_unique<std::function<void(const LocationData& /* event */)>>(std::move(func))) {}
    inline void call(LocationData event) const {
      _function->operator()(event);
    }
  private:
    std::unique_ptr<std::function<void(const LocationData& /* event */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_LocationData create_Func_void_LocationData(void* _Nonnull swiftClosureWrapper);
  inline Func_void_LocationData_Wrapper wrap_Func_void_LocationData(Func_void_LocationData value) {
    return Func_void_LocationData_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const RouteProgress& /* event */)>
  /**
   * Specialized version of `std::function<void(const RouteProgress&)>`.
   */
  using Func_void_RouteProgress = std::function<void(const RouteProgress& /* event */)>;
  /**
   * Wrapper class for a `std::function<void(const RouteProgress& / * event * /)>`, this can be used from Swift.
   */
  class Func_void_RouteProgress_Wrapper final {
  public:
    explicit Func_void_RouteProgress_Wrapper(std::function<void(const RouteProgress& /* event */)>&& func): _function(std::make_unique<std::function<void(const RouteProgress& /* event */)>>(std::move(func))) {}
    inline void call(RouteProgress event) const {
      _function->operator()(event);
    }
  private:
    std::unique_ptr<std::function<void(const RouteProgress& /* event */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_RouteProgress create_Func_void_RouteProgress(void* _Nonnull swiftClosureWrapper);
  inline Func_void_RouteProgress_Wrapper wrap_Func_void_RouteProgress(Func_void_RouteProgress value) {
    return Func_void_RouteProgress_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const Message& /* error */)>
  /**
   * Specialized version of `std::function<void(const Message&)>`.
   */
  using Func_void_Message = std::function<void(const Message& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const Message& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_Message_Wrapper final {
  public:
    explicit Func_void_Message_Wrapper(std::function<void(const Message& /* error */)>&& func): _function(std::make_unique<std::function<void(const Message& /* error */)>>(std::move(func))) {}
    inline void call(Message error) const {
      _function->operator()(error);
    }
  private:
    std::unique_ptr<std::function<void(const Message& /* error */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_Message create_Func_void_Message(void* _Nonnull swiftClosureWrapper);
  inline Func_void_Message_Wrapper wrap_Func_void_Message(Func_void_Message value) {
    return Func_void_Message_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::mapboxturnbyturnnavigation::HybridMapboxTurnByTurnNavigationSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::mapboxturnbyturnnavigation::HybridMapboxTurnByTurnNavigationSpec>`.
   */
  using std__shared_ptr_margelo__nitro__mapboxturnbyturnnavigation__HybridMapboxTurnByTurnNavigationSpec_ = std::shared_ptr<margelo::nitro::mapboxturnbyturnnavigation::HybridMapboxTurnByTurnNavigationSpec>;
  std::shared_ptr<margelo::nitro::mapboxturnbyturnnavigation::HybridMapboxTurnByTurnNavigationSpec> create_std__shared_ptr_margelo__nitro__mapboxturnbyturnnavigation__HybridMapboxTurnByTurnNavigationSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__mapboxturnbyturnnavigation__HybridMapboxTurnByTurnNavigationSpec_(std__shared_ptr_margelo__nitro__mapboxturnbyturnnavigation__HybridMapboxTurnByTurnNavigationSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::mapboxturnbyturnnavigation::HybridMapboxTurnByTurnNavigationSpec>
  using std__weak_ptr_margelo__nitro__mapboxturnbyturnnavigation__HybridMapboxTurnByTurnNavigationSpec_ = std::weak_ptr<margelo::nitro::mapboxturnbyturnnavigation::HybridMapboxTurnByTurnNavigationSpec>;
  inline std__weak_ptr_margelo__nitro__mapboxturnbyturnnavigation__HybridMapboxTurnByTurnNavigationSpec_ weakify_std__shared_ptr_margelo__nitro__mapboxturnbyturnnavigation__HybridMapboxTurnByTurnNavigationSpec_(const std::shared_ptr<margelo::nitro::mapboxturnbyturnnavigation::HybridMapboxTurnByTurnNavigationSpec>& strong) { return strong; }
  
  // pragma MARK: Result<std::function<void()>>
  using Result_std__function_void____ = Result<std::function<void()>>;
  inline Result_std__function_void____ create_Result_std__function_void____(const std::function<void()>& value) {
    return Result<std::function<void()>>::withValue(value);
  }
  inline Result_std__function_void____ create_Result_std__function_void____(const std::exception_ptr& error) {
    return Result<std::function<void()>>::withError(error);
  }

} // namespace margelo::nitro::mapboxturnbyturnnavigation::bridge::swift
