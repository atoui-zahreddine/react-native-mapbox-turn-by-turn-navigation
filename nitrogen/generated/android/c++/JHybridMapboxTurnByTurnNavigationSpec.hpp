///
/// HybridMapboxTurnByTurnNavigationSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridMapboxTurnByTurnNavigationSpec.hpp"




namespace margelo::nitro::mapboxturnbyturnnavigation {

  using namespace facebook;

  class JHybridMapboxTurnByTurnNavigationSpec: public jni::HybridClass<JHybridMapboxTurnByTurnNavigationSpec, JHybridObject>,
                                               public virtual HybridMapboxTurnByTurnNavigationSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/mapboxturnbyturnnavigation/HybridMapboxTurnByTurnNavigationSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridMapboxTurnByTurnNavigationSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridMapboxTurnByTurnNavigationSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridMapboxTurnByTurnNavigationSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;

  public:
    inline const jni::global_ref<JHybridMapboxTurnByTurnNavigationSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    std::optional<bool> getMute() override;
    void setMute(std::optional<bool> mute) override;
    std::optional<DistanceUnitEnum> getDistanceUnit() override;
    void setDistanceUnit(std::optional<DistanceUnitEnum> distanceUnit) override;
    Coordinate getOrigin() override;
    void setOrigin(const Coordinate& origin) override;
    std::optional<std::string> getDestinationTitle() override;
    void setDestinationTitle(const std::optional<std::string>& destinationTitle) override;
    Coordinate getDestination() override;
    void setDestination(const Coordinate& destination) override;
    std::optional<std::string> getLanguage() override;
    void setLanguage(const std::optional<std::string>& language) override;
    std::optional<TravelModeEnum> getTravelMode() override;
    void setTravelMode(std::optional<TravelModeEnum> travelMode) override;
    std::optional<bool> getShouldSimulateRoute() override;
    void setShouldSimulateRoute(std::optional<bool> shouldSimulateRoute) override;
    std::optional<std::vector<Waypoint>> getWaypoints() override;
    void setWaypoints(const std::optional<std::vector<Waypoint>>& waypoints) override;
    std::optional<bool> getShowsEndOfRouteFeedback() override;
    void setShowsEndOfRouteFeedback(std::optional<bool> showsEndOfRouteFeedback) override;
    std::optional<bool> getShowCancelButton() override;
    void setShowCancelButton(std::optional<bool> showCancelButton) override;
    std::optional<bool> getHideStatusView() override;
    void setHideStatusView(std::optional<bool> hideStatusView) override;

  public:
    // Methods
    std::function<void()> addOnWaypointArrivalListener(const std::function<void(const WaypointEvent& /* event */)>& listener) override;
    std::function<void()> addOnArrivalListener(const std::function<void(const Coordinate& /* event */)>& listener) override;
    std::function<void()> addOnLocationChangeListener(const std::function<void(const LocationData& /* event */)>& listener) override;
    std::function<void()> addOnRouteProgressChangeListener(const std::function<void(const RouteProgress& /* event */)>& listener) override;
    std::function<void()> addOnCancelListener(const std::function<void()>& listener) override;
    std::function<void()> addOnErrorListener(const std::function<void(const Message& /* error */)>& listener) override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridMapboxTurnByTurnNavigationSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::mapboxturnbyturnnavigation
