///
/// HybridMapboxTurnByTurnNavigationSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.mapboxturnbyturnnavigation

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*
import com.margelo.nitro.views.*

/**
 * A Kotlin class representing the MapboxTurnByTurnNavigation HybridObject.
 * Implement this abstract class to create Kotlin-based instances of MapboxTurnByTurnNavigation.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridMapboxTurnByTurnNavigationSpec: HybridView() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var mute: Boolean?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var distanceUnit: DistanceUnitEnum?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var origin: Coordinate
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var destinationTitle: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var destination: Coordinate
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var language: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var travelMode: TravelModeEnum?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var shouldSimulateRoute: Boolean?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var waypoints: Array<Waypoint>?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var showsEndOfRouteFeedback: Boolean?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var showCancelButton: Boolean?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var hideStatusView: Boolean?

  // Methods
  abstract fun addOnWaypointArrivalListener(listener: (event: WaypointEvent) -> Unit): () -> Unit
  
  @DoNotStrip
  @Keep
  private fun addOnWaypointArrivalListener_cxx(listener: Func_void_WaypointEvent): Func_void {
    val __result = addOnWaypointArrivalListener(listener)
    return Func_void_java(__result)
  }
  
  abstract fun addOnArrivalListener(listener: (event: Coordinate) -> Unit): () -> Unit
  
  @DoNotStrip
  @Keep
  private fun addOnArrivalListener_cxx(listener: Func_void_Coordinate): Func_void {
    val __result = addOnArrivalListener(listener)
    return Func_void_java(__result)
  }
  
  abstract fun addOnLocationChangeListener(listener: (event: LocationData) -> Unit): () -> Unit
  
  @DoNotStrip
  @Keep
  private fun addOnLocationChangeListener_cxx(listener: Func_void_LocationData): Func_void {
    val __result = addOnLocationChangeListener(listener)
    return Func_void_java(__result)
  }
  
  abstract fun addOnRouteProgressChangeListener(listener: (event: RouteProgress) -> Unit): () -> Unit
  
  @DoNotStrip
  @Keep
  private fun addOnRouteProgressChangeListener_cxx(listener: Func_void_RouteProgress): Func_void {
    val __result = addOnRouteProgressChangeListener(listener)
    return Func_void_java(__result)
  }
  
  abstract fun addOnCancelListener(listener: () -> Unit): () -> Unit
  
  @DoNotStrip
  @Keep
  private fun addOnCancelListener_cxx(listener: Func_void): Func_void {
    val __result = addOnCancelListener(listener)
    return Func_void_java(__result)
  }
  
  abstract fun addOnErrorListener(listener: (error: Message) -> Unit): () -> Unit
  
  @DoNotStrip
  @Keep
  private fun addOnErrorListener_cxx(listener: Func_void_Message): Func_void {
    val __result = addOnErrorListener(listener)
    return Func_void_java(__result)
  }

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridMapboxTurnByTurnNavigationSpec"
  }
}
