export declare const expoTemplateBuildGradle = "\nimport org.apache.tools.ant.taskdefs.condition.Os\n\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext {\n        buildToolsVersion = findProperty('android.buildToolsVersion') ?: '31.0.0'\n        minSdkVersion = Integer.parseInt(findProperty('android.minSdkVersion') ?: '21')\n        compileSdkVersion = Integer.parseInt(findProperty('android.compileSdkVersion') ?: '31')\n        targetSdkVersion = Integer.parseInt(findProperty('android.targetSdkVersion') ?: '31')\n        if (findProperty('android.kotlinVersion')) {\n            kotlinVersion = findProperty('android.kotlinVersion')\n        }\n        frescoVersion = findProperty('expo.frescoVersion') ?: '2.5.0'\n\n        if (System.properties['os.arch'] == 'aarch64') {\n            // For M1 Users we need to use the NDK 24 which added support for aarch64\n            ndkVersion = '24.0.8215888'\n        } else {\n            // Otherwise we default to the side-by-side NDK version from AGP.\n            ndkVersion = '21.4.7075529'\n        }\n    }\n    repositories {\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'com.google.gms:google-services:4.3.3'\n        classpath('com.android.tools.build:gradle:7.0.4')\n        classpath('com.facebook.react:react-native-gradle-plugin')\n        classpath('de.undercouch:gradle-download-task:4.1.2')\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\ndef REACT_NATIVE_VERSION = new File(['node', '--print',\"JSON.parse(require('fs').readFileSync(require.resolve('react-native/package.json'), 'utf-8')).version\"].execute(null, rootDir).text.trim())\n\nallprojects {\n    configurations.all {\n        resolutionStrategy {\n            force \"com.facebook.react:react-native:\" + REACT_NATIVE_VERSION\n        }\n    }\n\n    repositories {\n        mavenLocal()\n        maven {\n            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n            url(new File(['node', '--print', \"require.resolve('react-native/package.json')\"].execute(null, rootDir).text.trim(), '../android'))\n        }\n        maven {\n            // Android JSC is installed from npm\n            url(new File(['node', '--print', \"require.resolve('jsc-android/package.json')\"].execute(null, rootDir).text.trim(), '../dist'))\n        }\n\n        google()\n        mavenCentral {\n            // We don't want to fetch react-native from Maven Central as there are\n            // older versions over there.\n            content {\n                excludeGroup 'com.facebook.react'\n            }\n        }\n        maven { url 'https://www.jitpack.io' }\n    }\n}\n";
export declare const expoTemplateBuildGradleWithExpoCamera = "\n\nimport org.apache.tools.ant.taskdefs.condition.Os\n\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext {\n        buildToolsVersion = findProperty('android.buildToolsVersion') ?: '31.0.0'\n        minSdkVersion = Integer.parseInt(findProperty('android.minSdkVersion') ?: '21')\n        compileSdkVersion = Integer.parseInt(findProperty('android.compileSdkVersion') ?: '31')\n        targetSdkVersion = Integer.parseInt(findProperty('android.targetSdkVersion') ?: '31')\n        if (findProperty('android.kotlinVersion')) {\n            kotlinVersion = findProperty('android.kotlinVersion')\n        }\n        frescoVersion = findProperty('expo.frescoVersion') ?: '2.5.0'\n\n        if (System.properties['os.arch'] == 'aarch64') {\n            // For M1 Users we need to use the NDK 24 which added support for aarch64\n            ndkVersion = '24.0.8215888'\n        } else {\n            // Otherwise we default to the side-by-side NDK version from AGP.\n            ndkVersion = '21.4.7075529'\n        }\n    }\n    repositories {\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'com.google.gms:google-services:4.3.3'\n        classpath('com.android.tools.build:gradle:7.0.4')\n        classpath('com.facebook.react:react-native-gradle-plugin')\n        classpath('de.undercouch:gradle-download-task:4.1.2')\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\ndef REACT_NATIVE_VERSION = new File(['node', '--print',\"JSON.parse(require('fs').readFileSync(require.resolve('react-native/package.json'), 'utf-8')).version\"].execute(null, rootDir).text.trim())\n\nallprojects {\n    configurations.all {\n        resolutionStrategy {\n            force \"com.facebook.react:react-native:\" + REACT_NATIVE_VERSION\n        }\n    }\n\n    repositories {\n        mavenLocal()\n        maven {\n            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n            url(new File(['node', '--print', \"require.resolve('react-native/package.json')\"].execute(null, rootDir).text.trim(), '../android'))\n        }\n        maven {\n            // Android JSC is installed from npm\n            url(new File(['node', '--print', \"require.resolve('jsc-android/package.json')\"].execute(null, rootDir).text.trim(), '../dist'))\n        }\n\n        google()\n        mavenCentral {\n            // We don't want to fetch react-native from Maven Central as there are\n            // older versions over there.\n            content {\n                excludeGroup 'com.facebook.react'\n            }\n        }\n        maven { url 'https://www.jitpack.io' }\n    }\n}\n\n// @generated begin expo-camera-import - expo prebuild (DO NOT MODIFY) sync-f244f4f3d8bf7229102e8f992b525b8602c74770\ndef expoCameraMavenPath = new File([\"node\", \"--print\", \"require.resolve('expo-camera/package.json')\"].execute(null, rootDir).text.trim(), \"../android/maven\")\nallprojects { repositories { maven { url(expoCameraMavenPath) } } }\n// @generated end expo-camera-import\n";
export declare const expoTemplateBuildGradleWithoutMavenLocal: string;
//# sourceMappingURL=buildGradleFiles.d.ts.map